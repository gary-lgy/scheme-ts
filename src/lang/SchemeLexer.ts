// Generated from ./src/lang/Scheme.g4 by ANTLR 4.9.0-SNAPSHOT
// @ts-ignore

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class SchemeLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly T__2 = 3
  public static readonly T__3 = 4
  public static readonly T__4 = 5
  public static readonly T__5 = 6
  public static readonly T__6 = 7
  public static readonly STRING = 8
  public static readonly NUMBER = 9
  public static readonly BOOL = 10
  public static readonly IDENTIFIER = 11
  public static readonly WHITESPACE = 12
  public static readonly COMMENT = 13

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'T__2',
    'T__3',
    'T__4',
    'T__5',
    'T__6',
    'STRING',
    'NUMBER',
    'BOOL',
    'IDENTIFIER',
    'WHITESPACE',
    'COMMENT',
    'LETTER',
    'DIGIT',
    'IDENTIFIER_INITIAL',
    'IDENTIFIER_SUBSEQUENT',
    'PECULIAR_IDENTIFIER'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'''",
    "'`'",
    "','",
    "',@'",
    "'('",
    "')'",
    "'.'"
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    undefined,
    'STRING',
    'NUMBER',
    'BOOL',
    'IDENTIFIER',
    'WHITESPACE',
    'COMMENT'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    SchemeLexer._LITERAL_NAMES,
    SchemeLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return SchemeLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(SchemeLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'Scheme.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return SchemeLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return SchemeLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return SchemeLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return SchemeLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x0F\x84\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03' +
    '\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t' +
    '\x03\t\x03\t\x03\t\x07\t;\n\t\f\t\x0E\t>\v\t\x03\t\x03\t\x03\n\x05\nC' +
    '\n\n\x03\n\x06\nF\n\n\r\n\x0E\nG\x03\n\x03\n\x06\nL\n\n\r\n\x0E\nM\x05' +
    '\nP\n\n\x03\v\x03\v\x03\v\x03\v\x05\vV\n\v\x03\f\x03\f\x07\fZ\n\f\f\f' +
    '\x0E\f]\v\f\x03\f\x05\f`\n\f\x03\r\x06\rc\n\r\r\r\x0E\rd\x03\r\x03\r\x03' +
    '\x0E\x03\x0E\x07\x0Ek\n\x0E\f\x0E\x0E\x0En\v\x0E\x03\x0E\x03\x0E\x03\x0F' +
    '\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11\x05\x11x\n\x11\x03\x12\x03\x12' +
    '\x03\x12\x05\x12}\n\x12\x03\x13\x03\x13\x03\x13\x03\x13\x05\x13\x83\n' +
    '\x13\x02\x02\x02\x14\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02' +
    '\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02' +
    '\x0E\x1B\x02\x0F\x1D\x02\x02\x1F\x02\x02!\x02\x02#\x02\x02%\x02\x02\x03' +
    '\x02\b\x04\x02$$^^\x04\x02--//\x05\x02\v\f\x0F\x0F""\x04\x02\f\f\x0F' +
    '\x0F\n\x02##&(,,11<<>A`a\x80\x80\x05\x02--/0BB\x02\x8D\x02\x03\x03\x02' +
    '\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02' +
    '\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02' +
    '\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02' +
    '\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02' +
    "\x02\x03'\x03\x02\x02\x02\x05)\x03\x02\x02\x02\x07+\x03\x02\x02\x02\t" +
    '-\x03\x02\x02\x02\v0\x03\x02\x02\x02\r2\x03\x02\x02\x02\x0F4\x03\x02\x02' +
    '\x02\x116\x03\x02\x02\x02\x13B\x03\x02\x02\x02\x15U\x03\x02\x02\x02\x17' +
    '_\x03\x02\x02\x02\x19b\x03\x02\x02\x02\x1Bh\x03\x02\x02\x02\x1Dq\x03\x02' +
    '\x02\x02\x1Fs\x03\x02\x02\x02!w\x03\x02\x02\x02#|\x03\x02\x02\x02%\x82' +
    "\x03\x02\x02\x02'(\x07)\x02\x02(\x04\x03\x02\x02\x02)*\x07b\x02\x02*" +
    '\x06\x03\x02\x02\x02+,\x07.\x02\x02,\b\x03\x02\x02\x02-.\x07.\x02\x02' +
    './\x07B\x02\x02/\n\x03\x02\x02\x0201\x07*\x02\x021\f\x03\x02\x02\x022' +
    '3\x07+\x02\x023\x0E\x03\x02\x02\x0245\x070\x02\x025\x10\x03\x02\x02\x02' +
    '6<\x07$\x02\x0278\x07^\x02\x028;\v\x02\x02\x029;\n\x02\x02\x02:7\x03\x02' +
    '\x02\x02:9\x03\x02\x02\x02;>\x03\x02\x02\x02<:\x03\x02\x02\x02<=\x03\x02' +
    '\x02\x02=?\x03\x02\x02\x02><\x03\x02\x02\x02?@\x07$\x02\x02@\x12\x03\x02' +
    '\x02\x02AC\t\x03\x02\x02BA\x03\x02\x02\x02BC\x03\x02\x02\x02CE\x03\x02' +
    '\x02\x02DF\x05\x1F\x10\x02ED\x03\x02\x02\x02FG\x03\x02\x02\x02GE\x03\x02' +
    '\x02\x02GH\x03\x02\x02\x02HO\x03\x02\x02\x02IK\x070\x02\x02JL\x05\x1F' +
    '\x10\x02KJ\x03\x02\x02\x02LM\x03\x02\x02\x02MK\x03\x02\x02\x02MN\x03\x02' +
    '\x02\x02NP\x03\x02\x02\x02OI\x03\x02\x02\x02OP\x03\x02\x02\x02P\x14\x03' +
    '\x02\x02\x02QR\x07%\x02\x02RV\x07v\x02\x02ST\x07%\x02\x02TV\x07h\x02\x02' +
    'UQ\x03\x02\x02\x02US\x03\x02\x02\x02V\x16\x03\x02\x02\x02W[\x05!\x11\x02' +
    'XZ\x05#\x12\x02YX\x03\x02\x02\x02Z]\x03\x02\x02\x02[Y\x03\x02\x02\x02' +
    '[\\\x03\x02\x02\x02\\`\x03\x02\x02\x02][\x03\x02\x02\x02^`\x05%\x13\x02' +
    '_W\x03\x02\x02\x02_^\x03\x02\x02\x02`\x18\x03\x02\x02\x02ac\t\x04\x02' +
    '\x02ba\x03\x02\x02\x02cd\x03\x02\x02\x02db\x03\x02\x02\x02de\x03\x02\x02' +
    '\x02ef\x03\x02\x02\x02fg\b\r\x02\x02g\x1A\x03\x02\x02\x02hl\x07=\x02\x02' +
    'ik\n\x05\x02\x02ji\x03\x02\x02\x02kn\x03\x02\x02\x02lj\x03\x02\x02\x02' +
    'lm\x03\x02\x02\x02mo\x03\x02\x02\x02nl\x03\x02\x02\x02op\b\x0E\x02\x02' +
    'p\x1C\x03\x02\x02\x02qr\x04c|\x02r\x1E\x03\x02\x02\x02st\x042;\x02t \x03' +
    '\x02\x02\x02ux\x05\x1D\x0F\x02vx\t\x06\x02\x02wu\x03\x02\x02\x02wv\x03' +
    '\x02\x02\x02x"\x03\x02\x02\x02y}\x05!\x11\x02z}\x05\x1F\x10\x02{}\t\x07' +
    '\x02\x02|y\x03\x02\x02\x02|z\x03\x02\x02\x02|{\x03\x02\x02\x02}$\x03\x02' +
    '\x02\x02~\x83\t\x03\x02\x02\x7F\x80\x070\x02\x02\x80\x81\x070\x02\x02' +
    '\x81\x83\x070\x02\x02\x82~\x03\x02\x02\x02\x82\x7F\x03\x02\x02\x02\x83' +
    '&\x03\x02\x02\x02\x11\x02:<BGMOU[_dlw|\x82\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!SchemeLexer.__ATN) {
      SchemeLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(SchemeLexer._serializedATN)
      )
    }

    return SchemeLexer.__ATN
  }
}
