// Generated from ./src/lang/Scheme.g4 by ANTLR 4.9.0-SNAPSHOT
// @ts-ignore

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class SchemeLexer extends Lexer {
  public static readonly T__0 = 1
  public static readonly T__1 = 2
  public static readonly STRING = 3
  public static readonly NUMBER = 4
  public static readonly BOOL = 5
  public static readonly WHITESPACE = 6
  public static readonly IDENTIFIER = 7

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'T__0',
    'T__1',
    'STRING',
    'NUMBER',
    'BOOL',
    'WHITESPACE',
    'IDENTIFIER',
    'LETTER',
    'DIGIT',
    'IDENTIFIER_INITIAL',
    'IDENTIFIER_SUBSEQUENT',
    'PECULIAR_IDENTIFIER'
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [undefined, "'('", "')'"]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    undefined,
    undefined,
    'STRING',
    'NUMBER',
    'BOOL',
    'WHITESPACE',
    'IDENTIFIER'
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    SchemeLexer._LITERAL_NAMES,
    SchemeLexer._SYMBOLIC_NAMES,
    []
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return SchemeLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(SchemeLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'Scheme.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return SchemeLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return SchemeLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return SchemeLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return SchemeLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\td\b\x01\x04' +
    '\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04' +
    '\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r' +
    '\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x07\x04' +
    "$\n\x04\f\x04\x0E\x04'\v\x04\x03\x04\x03\x04\x03\x05\x05\x05,\n\x05\x03" +
    '\x05\x06\x05/\n\x05\r\x05\x0E\x050\x03\x05\x03\x05\x06\x055\n\x05\r\x05' +
    '\x0E\x056\x05\x059\n\x05\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06?\n\x06' +
    '\x03\x07\x06\x07B\n\x07\r\x07\x0E\x07C\x03\x07\x03\x07\x03\b\x03\b\x07' +
    '\bJ\n\b\f\b\x0E\bM\v\b\x03\b\x05\bP\n\b\x03\t\x03\t\x03\n\x03\n\x03\v' +
    '\x03\v\x05\vX\n\v\x03\f\x03\f\x03\f\x05\f]\n\f\x03\r\x03\r\x03\r\x03\r' +
    '\x05\rc\n\r\x02\x02\x02\x0E\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02' +
    '\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\x02\x13\x02\x02\x15\x02\x02\x17' +
    '\x02\x02\x19\x02\x02\x03\x02\x07\x04\x02$$^^\x04\x02--//\x05\x02\v\f\x0F' +
    '\x0F""\b\x02&(,,11<<>A`a\x06\x02##--/0BB\x02l\x02\x03\x03\x02\x02\x02' +
    '\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02' +
    '\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x03' +
    '\x1B\x03\x02\x02\x02\x05\x1D\x03\x02\x02\x02\x07\x1F\x03\x02\x02\x02\t' +
    '+\x03\x02\x02\x02\v>\x03\x02\x02\x02\rA\x03\x02\x02\x02\x0FO\x03\x02\x02' +
    '\x02\x11Q\x03\x02\x02\x02\x13S\x03\x02\x02\x02\x15W\x03\x02\x02\x02\x17' +
    '\\\x03\x02\x02\x02\x19b\x03\x02\x02\x02\x1B\x1C\x07*\x02\x02\x1C\x04\x03' +
    '\x02\x02\x02\x1D\x1E\x07+\x02\x02\x1E\x06\x03\x02\x02\x02\x1F%\x07$\x02' +
    '\x02 !\x07^\x02\x02!$\v\x02\x02\x02"$\n\x02\x02\x02# \x03\x02\x02\x02' +
    '#"\x03\x02\x02\x02$\'\x03\x02\x02\x02%#\x03\x02\x02\x02%&\x03\x02\x02' +
    "\x02&(\x03\x02\x02\x02'%\x03\x02\x02\x02()\x07$\x02\x02)\b\x03\x02\x02" +
    '\x02*,\t\x03\x02\x02+*\x03\x02\x02\x02+,\x03\x02\x02\x02,.\x03\x02\x02' +
    '\x02-/\x05\x13\n\x02.-\x03\x02\x02\x02/0\x03\x02\x02\x020.\x03\x02\x02' +
    '\x0201\x03\x02\x02\x0218\x03\x02\x02\x0224\x070\x02\x0235\x05\x13\n\x02' +
    '43\x03\x02\x02\x0256\x03\x02\x02\x0264\x03\x02\x02\x0267\x03\x02\x02\x02' +
    '79\x03\x02\x02\x0282\x03\x02\x02\x0289\x03\x02\x02\x029\n\x03\x02\x02' +
    '\x02:;\x07%\x02\x02;?\x07v\x02\x02<=\x07%\x02\x02=?\x07h\x02\x02>:\x03' +
    '\x02\x02\x02><\x03\x02\x02\x02?\f\x03\x02\x02\x02@B\t\x04\x02\x02A@\x03' +
    '\x02\x02\x02BC\x03\x02\x02\x02CA\x03\x02\x02\x02CD\x03\x02\x02\x02DE\x03' +
    '\x02\x02\x02EF\b\x07\x02\x02F\x0E\x03\x02\x02\x02GK\x05\x15\v\x02HJ\x05' +
    '\x17\f\x02IH\x03\x02\x02\x02JM\x03\x02\x02\x02KI\x03\x02\x02\x02KL\x03' +
    '\x02\x02\x02LP\x03\x02\x02\x02MK\x03\x02\x02\x02NP\x05\x19\r\x02OG\x03' +
    '\x02\x02\x02ON\x03\x02\x02\x02P\x10\x03\x02\x02\x02QR\x04c|\x02R\x12\x03' +
    '\x02\x02\x02ST\x042;\x02T\x14\x03\x02\x02\x02UX\x05\x11\t\x02VX\t\x05' +
    '\x02\x02WU\x03\x02\x02\x02WV\x03\x02\x02\x02X\x16\x03\x02\x02\x02Y]\x05' +
    '\x15\v\x02Z]\x05\x13\n\x02[]\t\x06\x02\x02\\Y\x03\x02\x02\x02\\Z\x03\x02' +
    '\x02\x02\\[\x03\x02\x02\x02]\x18\x03\x02\x02\x02^c\t\x03\x02\x02_`\x07' +
    '0\x02\x02`a\x070\x02\x02ac\x070\x02\x02b^\x03\x02\x02\x02b_\x03\x02\x02' +
    '\x02c\x1A\x03\x02\x02\x02\x10\x02#%+068>CKOW\\b\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!SchemeLexer.__ATN) {
      SchemeLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(SchemeLexer._serializedATN)
      )
    }

    return SchemeLexer.__ATN
  }
}
