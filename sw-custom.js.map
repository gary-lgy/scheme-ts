{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/uuid/dist/esm-browser/rng.js","webpack:///./node_modules/uuid/dist/esm-browser/stringify.js","webpack:///./node_modules/uuid/dist/esm-browser/validate.js","webpack:///./src/features/eventLogging/index.ts","webpack:///./src/features/eventLogging/ServiceWorker.ts","webpack:///./src/features/eventLogging/client.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","crypto","getRandomValues","msCrypto","Uint8Array","validate","byteToHex","push","toString","substr","process","REACT_APP_CADET_LOGGER","getDB","fn","answer","memoize","Promise","resolve","reject","request","indexedDB","open","onsuccess","evt","result","onerror","console","error","onupgradeneeded","target","createObjectStore","keyPath","autoIncrement","currentlyUploading","cadetLoggerUrl","self","addEventListener","data","type","waitUntil","async","accessToken","id","records","then","db","transaction","objectStore","getAll","last","length","logs","headers","Headers","append","fetchOpts","method","body","JSON","stringify","fetch","ok","Error","uploadLogs","lastId","range","IDBKeyRange","bound","delete","oncomplete","e","trySyncLogs"],"mappings":"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","file":"sw-custom.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n// find the complete implementation of crypto (msCrypto) on IE11.\nvar getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  if (!getRandomValues) {\n    throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import { v4 as uuid } from 'uuid';\n\nimport { Input as RecorderInput } from '../sourceRecorder/SourceRecorderTypes';\n\nexport const playgroundQuestionId: number = -1;\n\ntype PlaybackInitial = {\n  editorValue: string;\n};\n\ntype PlaybackInitialTagged = PlaybackInitial & {\n  type: 'init';\n  time: number;\n};\n\ntype Input = RecorderInput | PlaybackInitialTagged;\n\nconst questionIdLookup: { [id: string]: string } = {};\n\n// ------------------- EXTERNAL API -------------------\n\nconst cadetLoggerUrl = process.env.REACT_APP_CADET_LOGGER;\nexport function log(id: string, input: Input) {\n  if (process.env.NODE_ENV === 'test' || !cadetLoggerUrl) {\n    return;\n  } // This is set statically\n  saveRecord({\n    ...input,\n    questionId: questionIdLookup[id],\n    sessionId: id\n  });\n}\n\n// Creates a session, then logs it.\nexport function initSession(questionId: string, initialState: PlaybackInitial): string {\n  const id = uuid();\n  questionIdLookup[id] = questionId;\n  log(id, {\n    ...initialState,\n    type: 'init',\n    time: Date.now()\n  });\n  return id;\n}\n\n// ------------------- INDEXEDDB API -------------------\ntype LogRecord = Input & {\n  sessionId: string;\n  questionId: string;\n  time: number;\n};\n\n// Yes, past tense. For when it is inside the log.\nexport type LoggedRecord = LogRecord & { id: number };\n\nconst VERSION = 1;\nconst DB_NAME = 'evtlogs';\nconst STORE_NAME = 'logs';\nconst getDB = memoize(\n  (): Promise<IDBDatabase> => {\n    return new Promise((resolve, reject) => {\n      // Make a request\n      const request = indexedDB.open(DB_NAME, VERSION);\n      // hook the onsuccess\n      request.onsuccess = evt => {\n        resolve(request.result);\n      };\n\n      request.onerror = evt => {\n        console.error('Failed to get db', evt);\n        reject(request.error);\n      };\n\n      // Set it up if necessary (on upgrade)\n      request.onupgradeneeded = evt => {\n        // Create the database here\n        const db: IDBDatabase = (evt?.target as any).result; // Bug with the types...\n        db.createObjectStore(STORE_NAME, {\n          keyPath: 'id', // Entry id, only used to figure out the last transfered value\n          autoIncrement: true\n        });\n      };\n    });\n  }\n);\n\nfunction saveRecord(record: LogRecord) {\n  return new Promise((resolve, reject) => {\n    getDB().then(db => {\n      const transaction = db.transaction([STORE_NAME], 'readwrite');\n      transaction.oncomplete = resolve;\n      transaction.onerror = reject;\n\n      const objectStore = transaction.objectStore(STORE_NAME);\n      /*const request = */ objectStore.add(record);\n      // Can actually check for request success.\n    });\n  });\n}\n\n// Retrieving and uploading records\n// This forces it to be singleton,\n// preventing multiple uploads without a lock.\n\nexport function getRecords(): Promise<LoggedRecord[]> {\n  return new Promise((resolve, reject) => {\n    getDB().then(db => {\n      const transaction = db.transaction([STORE_NAME], 'readwrite');\n      const objectStore = transaction.objectStore(STORE_NAME);\n      objectStore.getAll().onsuccess = function (evt) {\n        const result = (evt?.target as any).result;\n        resolve(result);\n      };\n    });\n  });\n}\n\nexport function deleteRecordsUpto(id: number) {\n  return new Promise((resolve, reject) => {\n    getDB().then(db => {\n      const transaction = db.transaction([STORE_NAME], 'readwrite');\n      const range = IDBKeyRange.bound(0, id, false, false);\n      const objectStore = transaction.objectStore(STORE_NAME);\n      objectStore.delete(range);\n      transaction.oncomplete = resolve;\n      transaction.onerror = reject;\n    });\n  });\n}\n\n// Importing lodash for this is apparently a bad idea.\n// This saves 70kb. Out of 72kb.\nfunction memoize<T>(fn: () => T) {\n  let answer: T | null = null;\n  return () => {\n    if (!answer) {\n      answer = fn();\n      return answer;\n    } else {\n      return answer;\n    }\n  };\n}\n","/// <reference lib=\"webworker\" />\nimport { deleteRecordsUpto, getRecords, LoggedRecord } from '.';\nimport { SYNC_LOGS } from './client';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nlet currentlyUploading = false;\nconst cadetLoggerUrl = process.env.REACT_APP_CADET_LOGGER;\n\n// This needs to be a library, so i'm simply going to export a main function\n// TODO: actually upload something.\nexport function main() {\n  if (!cadetLoggerUrl) {\n    return;\n  } // This is set statically.\n\n  self.addEventListener('message', evt => {\n    if (evt.data && evt.data.type === SYNC_LOGS) {\n      evt.waitUntil(trySyncLogs(evt.data.accessToken));\n    }\n  });\n}\n\nasync function trySyncLogs(accessToken: string) {\n  if (currentlyUploading) {\n    return;\n  }\n  try {\n    currentlyUploading = true;\n    const records = await getRecords();\n    const last = records.length;\n    if (last === 0) {\n      return;\n    }\n\n    await uploadLogs(cadetLoggerUrl!, accessToken, records);\n    // This can throw, so the next part will only run if there are no errors.\n\n    const lastId = records[last - 1].id;\n    // Delete records\n    await deleteRecordsUpto(lastId);\n  } catch (e) {\n    // Do nothing: retry later.\n  } finally {\n    currentlyUploading = false;\n  }\n}\n\nasync function uploadLogs(cadetLoggerUrl: string, accessToken: string, logs: LoggedRecord[]) {\n  const headers = new Headers();\n  headers.append('Authorization', `Bearer ${accessToken}`);\n  headers.append('Content-Type', 'application/json');\n\n  const fetchOpts = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(logs)\n  };\n  const resp = await fetch(cadetLoggerUrl, fetchOpts);\n  if (!resp.ok) {\n    throw new Error('Just try again later');\n  }\n}\n","export const SYNC_LOGS = 'SYNC_LOGS';\n\nexport function triggerSyncLogs(accessToken?: string) {\n  if (!accessToken) {\n    return;\n  }\n  navigator.serviceWorker.controller?.postMessage({ type: SYNC_LOGS, accessToken });\n}\n"],"sourceRoot":""}